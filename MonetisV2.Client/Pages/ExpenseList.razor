@page "/"
@using MonetisV2.Shared
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="fw-bold">Expenses</h2>
        <button class="btn btn-primary" @onclick="NavigateToExpenseForm">➕ Add New Expense</button>
    </div>

    @if (expenses == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <h5 class="mb-3">Total Spent: <span class="text-success">@totalSpent.ToString("C")</span></h5>

        <div class="mb-3">
            <label for="categoryFilter" class="form-label fw-semibold">Filter by Category:</label>
            <select id="categoryFilter" class="form-select w-auto d-inline-block ms-2"
                    @bind="_selectedCategory"
                    @bind:event="onchange">
                @foreach (var category in categories)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>

        <table class="table table-striped table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th style="width: 150px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expense in FilteredExpenses())
                {
                    <tr>
                        <td>@expense.Description</td>
                        <td>@expense.Amount.ToString("C")</td>
                        <td>@expense.Category</td>
                        <td>@expense.Date.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditExpense(expense.Id)">✏️ Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteExpense(expense.Id)">🗑️ Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <h4 class="mt-5">Spending by Category</h4>
        <canvas id="categoryChart" width="400" height="200"></canvas>
    }
</div>

@code {
    private List<Expense> expenses = new();
    private decimal totalSpent;
    private string _selectedCategory = "All";
    private List<string> categories = new();

    private string selectedCategory
    {
        get => _selectedCategory;
        set
        {
            if (_selectedCategory != value)
            {
                _selectedCategory = value;
                _ = GenerateChartAsync(); // re-render chart
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        await GenerateChartAsync();
    }

    //removed this override as the chart was blank and moved await GenerateChartAsync inside OnInitializedAsync
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //   if (firstRender)
    //    {
    //        await GenerateChartAsync();
    //    }
    //}

    private async Task LoadDataAsync()
    {
        expenses = await Http.GetFromJsonAsync<List<Expense>>("api/expenses") ?? new();
        totalSpent = await Http.GetFromJsonAsync<decimal>("api/expenses/total");

        categories = expenses.Select(e => e.Category)
                             .Distinct()
                             .OrderBy(c => c)
                             .ToList();

        if (!categories.Contains("All"))
            categories.Insert(0, "All");
    }

    private IEnumerable<Expense> FilteredExpenses()
    {
        return selectedCategory == "All"
            ? expenses
            : expenses.Where(e => e.Category == selectedCategory);
    }

    private void NavigateToExpenseForm()
    {
        Navigation.NavigateTo("/expense-form");
    }

    private void EditExpense(int id)
    {
        Navigation.NavigateTo($"/expense-form/{id}");
    }

    private async Task DeleteExpense(int id)
    {
        await Http.DeleteAsync($"api/expenses/{id}");
        await LoadDataAsync();
        await GenerateChartAsync();
        StateHasChanged();
    }

    private async Task GenerateChartAsync()
    {
        var grouped = FilteredExpenses()
            .GroupBy(e => e.Category)
            .Select(g => new { Category = g.Key, Total = g.Sum(e => e.Amount) })
            .ToList();

        var labels = grouped.Select(g => g.Category).ToArray();
        var data = grouped.Select(g => g.Total).ToArray();

        await JS.InvokeVoidAsync("renderCategoryChart", labels, data);
        Console.WriteLine($"[Chart] Categories: {string.Join(", ", labels)}");
        Console.WriteLine($"[Chart] Values: {string.Join(", ", data)}");

    }
}
